Java
-------

OOPS:  Object Oriented Programming Structure

Features of OOPS:
1) Object  -- real world entity - which exist
       Features of Objects: human
       1) State - variable  Eg: height, weight, color, age
       2) Behaviour -- functions/methods , Eg: eating, walking, studying
       3) Identity -- object itself  -- address    

2) Class  -- Blueprint for an object  -- create structure for an object

3) Inheritance  -- deriving properties/behaviour from parents. -- used to create relationship b/w the classes.  -- reusability

4) Polymorphism  -- objects in many forms w.r.t behavoiur
5) Encapsulation  -- hidding the data
6) Abstraction  -- implementation of the method is hidden

-------------------------------------------------------------
Java:

OAK, 1995, James Gosling Java 1.0

Feature of Java:
1) Platform Independent -- WORA (write once run anywhere)
     JDK - Java Development Kit   -- Developers
     JRE - Java Runtime Environment   -- Enduser
     JVM - Java Virtual Machine -- Heart of Java

2) Secured
3) Robust
4) Scalable
5) Multi-threaded
6) Architecturally neutral


---------------------------------------------------

Naming Convention -- camel case convention
class 	--MyClass
objects     -- myClass
variables  -- myVariable
methods  -- myMethod
interface  -- MyInterface
arrays      -- myArray
packages  -- mypack
contants   -- MYCONSTANT


Structure of java
--------------------------

package         -- ONLY ONE /file
import stmt    -- 1 or many   /file
class defin{    -- 1 or many   /file

     variables
     methods{
          statements;
      }

}

------------------------------------------------------
Variables:
1) Local Variable   -- variable avaiable within the method
2) Instance Variable  -- variable avaiable within the class
3) Class Variable  / Static variable - variable avaiable within the class but declared as static
  

DataTypes
1) Value type DT
       1) Predefined   -- 8 (primitive dt)  -- int, byte, short, long, double, float, char, boolean
       2) Userdefined   -- enum
 
2) Reference Type DT
       1) Predefined    -- Object, String
        2) userdefined  -- All classes, interface, arrays we created

-----------------------------------

All instance variable have  a default values
The local variable Should be explicitly  initialized

---------------------
Access Specifier

public , private , protected , default(package access)

All private instance variables shd be accessed via public getters and setters

----------------------------------
Design pattern

A set of predefined solutions for the problems raised during the developement

MVC Design Pattern
M - Model
V - View 
C - Controller

toString()  -- gives the string representation of  an object

--------------------------------------------------
Conditional Constructs

if- else
switch case

Looping Constructs
for
while
do - while


--------------------------------------------
Constructors:

Special Method

Why? To initialise the instance variable of the class
           To instantiate the class

Features?
1) Will have the same name as that of the class method
2) It doesnt have any return type incl. void
3) It can have any type of access specifier
4) It is never inherited
5) It can be parameterised
6) When it will be called? -- whenever we instantiate the class

Default Constructor : constr created by JVM

---------------------------------------------------

Arrays:

An object with a Collection of homogenous entries(primitives / references)
-- Contigeous memory will be allocated
-- It is indexed and it starts with 0

Syntax:
 datatype[] arrayname = new datatype[size of array];

Eg:
int[] arr = new int[3];
int[] arr = {10,11,12};


-------------------------------------------------------

1) Given:
class X {}
class Y {Y () {}}
class Z {z(int i ) {} }
Which class has a default constructor?

2 ) Given:
public static void main (String [] args) {
int a, b, c = 0;
int a, b, c;
int g, int h, int i, = 0;
int d, e, F;
int k, l, m; = 0;

Which two declarations will compile?
A. int a, b, c = 0; 
B. int a, b, c; 
C. int g, int h, int i = 0; 
D. int d, e, F; 
E. int k, l, m = 0;

3) Given the code fragment:
int j=0, k =0;
for (int i=0; i < x; i++) {
do {
k=0;
while (k < z) {
k++;
System.out.print(k + " ");
}
System.out.println(" ");
j++;
} while (j< y);
System.out.println("----");
}
What values of x, y, z will produce the following result?
1 2 3 4
1 2 3 4
1 2 3 4
------
1 2 3 4
------
A. X = 4, Y = 3, Z = 2 
B. X = 3, Y = 2, Z = 3 
C. X = 2, Y = 3, Z = 3 
D. X = 4, Y = 2, Z= 3 
E. X = 2, Y = 3, Z = 4

4) Given the following code fragment:
if (value >= 0) {
if (value != 0)
System.out.print("the ");
else
System.out.print("quick ");
if (value < 10)
System.out.print("brown ");
if (value > 30)
System.out.print("fox ");
else if (value < 50)
System.out.print("jumps ");
else if (value < 10)
System.out.print("over ");
else
System.out.print("the ");
if (value > 10)
System.out.print("lazy ");
} else {
System.out.print("dog ");
}
System.out.print("... ");
}
What is the result if the integer value is 33?
A. The fox jump lazy... 
B. The fox lazy... 
C. Quick fox over lazy ... 
D. Quick fox the ....

----------------------------------------------
23/1

Inheritance:
 -- Is a design level concepts

Purpose:  Reusability of code.

Types of inheritance:
1) Single Level
2) Multi level
3) Multiple  -- NOT SUPPORTED BY JAVA. BUT INDIRECTLY IT IS SUPPORTED BY INTERFACE
4) Hirarchial
5) Hybrid  -- Multi level + Multiple  X

2 types of relationships
1) IS-A  -- parent -child r/s  -- extends
2) HAS-A -- composition

accountno  -- variab
customer  --class
balance - var
branch  -- var
IFSC - var
transactions  -- clas
statement  -- met
pancard -va
loan - clas
personal loan
Home loan
saving acc
current acco

account - class
bank - class
interest - var
deposit - method
withdraw - method

super keyword - to invoke the base class overridden method
super()   method - to invoke the base class constructor
this keyword   - points to the curent instance
this() method  - constructor chaining -- invoking the constructor within the same class
------------------------------
Polymorphism:

1) Overloading / static polymorphism / compile-time polymorphism
        same method name different set of parameter
        Types of OL:
        1) Method Overloading
        2) Constructor OL
        3) Operator OL (NOT SUPPORTED in JAVA)

2) Overridding / Dynamic poly  / Run-time poly
       same method name same set of parameter

Overloading:
  same method name different set of parameter
   Inheritance  NOT required. Bcoz it is done within the same class
   Return type and access specifier can be changed

3 Rules - either one rule shd b satisfied
1) No. of parameters shd change
     add(int a,int b)
     add(int a, int b, int c)
2) The datatype of the parameter shd change
        add(int a,int b)
       add(int a,float b)
3) Sequence of passing the parameter shd change
        add(float a,int b)
       add(int a,float b)

Overriding
same method name same set of parameter
Inheritance should be done.
U cant change the return type of the overridden method
Dont restrict the visibility of the method down the hirarchy.
Access specifier can be changed*
private access is NOT prefered in overridding
    default ---> protected --> public

------------------------------

A polymorphic object can invoke an overridden method from child and a regular method from parent. NOTE: A regular method is child CANT be invoked by a ploymorphic object.

------------------------------------------------
static keyword

-- When to use? Can be used when you require any state/behavoiur to be common to all the objects
-- static can be used  in 5 places
     variables
     methods
     Inner class
    import statement
    static block
-- A regular method can access both static and non-static variables
-- A static method can access ONLY static variable
-- To invoke the static vari/method ther is no need to create objects
-- If the static methods/ vari is available in a different class and when u try to invoke it in a different class, prefix the class name where static method/vari is created.
-- Static variables CANT be created within the static method. But non-static variable can be created.
-- static variables CAN be CHANGED.


1) public class ScopeTest1 {
	public static void main(String[] args) {
		doStuff(); // line x1		
		int x1 = x2; // line x2
		int x2 = j; // line x3
	}
	static void doStuff() {
		System.out.println(j); // line x4
	}
	static int j;
  }
Which line causes a compilation error?
A. line x1 B. line x2 C. line x3 D. line x4


2) class Overloading {
	void x (int i) {
		System.out.println("one");
	}
	void x (String s) {
		System.out.println("two");
	}
	void x (double d) {
		System.out.println("three");
	}
	public static void main(String[] args) {
		new Overloading().x (4.0);
	}
}
What is the result?
A. One B. Two C. Three D. Compilation fails

Final Keyword:
-- used in 3 places
    variable -- it becomes CONSTANT
    method -- Cannt be overridden
    class  -- Cannt be Inherited

-----------------------------------------------
Abstraction:

Can be implemented in 2 ways
1) Abstract Class
2) Interface

Abstract Class:

-- It is a class declared as abstract
-- The method without definition is an abstract method
-- If u have an abstract method the class shd also be declared as abstract
-- Abstract class CANT be instantiated
-- Abstr class can have variable declared / defined, constructor, regular method along with abstract method.
-- It is created to be a parent
-- The child class which inherit the abstract class should have the abstract methods implemented. Else the child shd also be declared as abstract

--  use extends Keyword 
-- For tightly coupled r/s

Interface:

-- Inteface CANT have declared variables, constructor, regular methods*
-- Interface can have defined variables  and abstract methods ONLY
-- All the methods within the interface are by default public and abstract
-- All variables within the interface are by default public static final
-- use implements keyword
-- For Loosely coupled r/s

extends  followed by implements
more than one interface can be implemented
but Only one class can be extended


1) Given the code fragment:
int b = 3;
if ( !(b > 3)) {
System.out.println("square");
}{
System.out.println("circle");
}
System.out.println("...");
What is the result?
A. square... B. circle... C. squarecircle... D. Compilation fails.

2) What is the proper way to defined a method that take two int values and returns their sum as an int value?
A. int sum(int first, int second) { first + second; } 
B. int sum(int first, second) { return first + second; } 
C.  sum(int first, int second) { return first + second; } 
D. int sum(int first, int second) { return first + second; } 
E. void sum (int first, int second) { return first + second; }


3)
View the Exhibit.
public class Hat {
public int ID =0;
public String name = "hat";
public String size = "One Size Fit All";
public String color="";
public String getName() { return name; }
public void setName(String name) {
this.name = name;
}
}
Given:
public class TestHat {
public static void main(String[] args) {
Hat blackCowboyHat = new Hat();
}
}
Which statement sets the name of the Hat instance?
A. blackCowboyHat.setName = "Cowboy Hat"; 
B. setName("Cowboy Hat"); 
C. Hat.setName("Cowboy Hat"); 
D. blackCowboyHat.setName("Cowboy Hat");


4) Given:
class X {
static void m (int[] i) {
i[0] += 7;
}
public static void main (String[] args) {
int[] j = new int[1];
j[0] = 12;
m(j);
System.out.println(j[0]);
}
}
What is the result?
A. 7 B. 12 C. 19 D. Compilation fails. E. An exception is thrown at runtime.

5) Given the class definitions:
class Shape { }
class Square extends Shape { }
Given the variable declarations:
Shape shape1 = null;
Square square1 = null;
Which four compile?
A. shape1 = (Square) new Square(); 
B. shape1 = new Square(); 
C. square1 = (Square) new Shape(); 
D. square1 = new Shape(); 
E. square1 = new Square(); shape1 = square1; 
F. shape1 = new Shape(); square1 = shape1;

6) Given:
public class SampleClass {
public static void main(String[] args) {
SampleClass sc, scA, scB;
sc = new SampleClass();
scA = new SampleClassA();
scB = new SampleClassB();
System.out.println("Hash is : " +
sc.getHash() + ", " + scA.getHash() + ", " + scB.getHash());
}
public int getHash() {
return 111111;
}
}
class SampleClassA extends SampleClass {
public long getHash() {
return 44444444;
}
}
class SampleClassB extends SampleClass {
public long getHash() {
return 999999999;
}
}

What is the result?
A. Compilation fails B. An exception is thrown at runtime 
C. There is no result because this is not correct way to determine the hash code 
D. Hash is: 111111, 44444444, 999999999


7) Given the code fragment:
int b = 4;
b -- ;
System.out.println (-- b);
System.out.println(b);
What is the result?
A. 2 2 B. 1 2 C. 3 2 D. 3 3
































































































